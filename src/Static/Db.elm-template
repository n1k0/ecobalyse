module Static.Db exposing (Db, db, processes)


import Data.Food.Db as FoodDb
import Data.Textile.Db as TextileDb


type alias Db =
    { foodDb : FoodDb.Db,  textileDb : TextileDb.Db }


textileProcessesJson : String
textileProcessesJson =
    """%textileProcessesJson%"""


textileDb : String -> Result String TextileDb.Db
textileDb textileProcesses =
    """%textileJson%""" |> TextileDb.buildFromJson textileProcesses


type alias Processes = { foodProcesses : String, textileProcesses: String }


foodProcessesJson : String
foodProcessesJson =
    """%foodProcessesJson%"""


foodIngredientsJson : String
foodIngredientsJson =
    """%foodIngredientsJson%"""


foodDb : String -> String -> Result String FoodDb.Db
foodDb textileProcesses foodProcesses =
    textileDb textileProcesses
        |> Result.andThen
            (\textileDbParsed ->
                FoodDb.buildFromJson textileDbParsed foodProcesses foodIngredientsJson
            )


processes : Processes
processes = 
    { foodProcesses = foodProcessesJson
    , textileProcesses = textileProcessesJson
    }


db : Processes -> Result String Db
db { foodProcesses, textileProcesses } =
    Result.map2 Db (foodDb textileProcesses foodProcesses) (textileDb textileProcesses)
